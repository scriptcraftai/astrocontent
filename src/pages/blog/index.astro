---
import BaseLayout from '@/layouts/BaseLayout.astro';
import BlogCard from '@/components/BlogCard.astro';
import { getCollection } from 'astro:content';

const allBlogPosts = (await getCollection('blog'))
  .filter(post => !post.data.draft)
  .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());

// Group posts by workflow type
const postsByWorkflow = allBlogPosts.reduce((acc, post) => {
  const type = post.data.workflowType;
  if (!acc[type]) {
    acc[type] = [];
  }
  acc[type].push(post);
  return acc;
}, {} as Record<string, typeof allBlogPosts>);

// Get all unique tags
const allTags = [...new Set(allBlogPosts.flatMap(post => post.data.tags))];
---

<BaseLayout 
  title="Automation Workflows Blog - Learn Business & Home Automation"
  description="Discover step-by-step automation workflows for business, marketing, smart home, and productivity. Learn Zapier, email automation, and workflow optimization strategies."
>
  <div class="max-w-6xl mx-auto px-4 py-12">
    <header class="text-center mb-16">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">Automation Workflows</h1>
      <p class="text-xl text-gray-600 max-w-2xl mx-auto">
        Learn how to automate your business processes, marketing campaigns, and personal workflows with step-by-step guides and real-world examples.
      </p>
    </header>
    
    <!-- Filter/Category Navigation -->
    <div class="mb-12">
      <div class="flex flex-wrap gap-3 justify-center">
        <button class="filter-btn active px-4 py-2 bg-blue-600 text-white rounded-full text-sm font-medium transition-colors" data-filter="all">
          All Posts ({allBlogPosts.length})
        </button>
        {Object.entries(postsByWorkflow).map(([workflowType, posts]) => (
          <button class="filter-btn px-4 py-2 bg-gray-200 text-gray-700 hover:bg-gray-300 rounded-full text-sm font-medium transition-colors" data-filter={workflowType.toLowerCase().replace(/\s+/g, '-')}>
            {workflowType} ({posts.length})
          </button>
        ))}
      </div>
    </div>
    
    <!-- Blog Posts Grid -->
    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8" id="posts-container">
      {allBlogPosts.map(post => (
        <div class="post-card" data-workflow={post.data.workflowType.toLowerCase().replace(/\s+/g, '-')} data-tags={post.data.tags.join(',').toLowerCase()}>
          <BlogCard
            title={post.data.title}
            description={post.data.description}
            date={post.data.date}
            slug={post.slug}
            workflowType={post.data.workflowType}
            tags={post.data.tags}
          />
        </div>
      ))}
    </div>
    
    <!-- Tags Section -->
    <section class="mt-16 bg-gray-50 rounded-lg p-8">
      <h2 class="text-2xl font-bold text-gray-900 mb-6 text-center">Popular Topics</h2>
      <div class="flex flex-wrap gap-3 justify-center">
        {allTags.map(tag => (
          <span class="tag-filter px-3 py-1 bg-white border border-gray-200 text-gray-700 rounded-full text-sm hover:bg-blue-50 hover:border-blue-200 cursor-pointer transition-colors">
            #{tag}
          </span>
        ))}
      </div>
    </section>
  </div>
</BaseLayout>

<script>
  // Filter functionality
  const filterButtons = document.querySelectorAll('.filter-btn');
  const postCards = document.querySelectorAll('.post-card');
  const tagFilters = document.querySelectorAll('.tag-filter');

  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      const filter = button.getAttribute('data-filter');
      
      // Update active button
      filterButtons.forEach(btn => {
        btn.classList.remove('active', 'bg-blue-600', 'text-white');
        btn.classList.add('bg-gray-200', 'text-gray-700');
      });
      button.classList.add('active', 'bg-blue-600', 'text-white');
      button.classList.remove('bg-gray-200', 'text-gray-700');
      
      // Filter posts
      postCards.forEach(card => {
        const cardWorkflow = card.getAttribute('data-workflow');
        if (filter === 'all' || cardWorkflow === filter) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    });
  });

  // Tag filter functionality
  tagFilters.forEach(tag => {
    tag.addEventListener('click', () => {
      const tagName = tag.textContent?.replace('#', '').toLowerCase();
      
      // Reset category filters
      filterButtons.forEach(btn => {
        btn.classList.remove('active', 'bg-blue-600', 'text-white');
        btn.classList.add('bg-gray-200', 'text-gray-700');
      });
      
      // Filter posts by tag
      postCards.forEach(card => {
        const cardTags = card.getAttribute('data-tags')?.toLowerCase();
        if (cardTags?.includes(tagName || '')) {
          card.style.display = 'block';
        } else {
          card.style.display = 'none';
        }
      });
    });
  });
</script>
