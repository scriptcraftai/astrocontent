---
import ToolLayout from '@/layouts/ToolLayout.astro';

const faqs = [
  {
    question: 'How to convert Word documents to PDF without uploading files?',
    answer: 'Our Word to PDF converter uses modern web technologies to process documents entirely in your browser. Your files never leave your device, ensuring complete privacy and security. The conversion happens locally using JavaScript libraries.'
  },
  {
    question: 'What Word document formats are supported?',
    answer: 'Our converter supports modern Word formats including .docx files. For older .doc formats, we recommend first opening the file in Microsoft Word and saving it as .docx format for best compatibility.'
  },
  {
    question: 'Will the formatting be preserved in the PDF?',
    answer: 'Yes, our converter maintains most formatting including fonts, styles, images, tables, and layouts. However, some advanced features like macros, embedded objects, or complex formatting may not be perfectly preserved.'
  },
  {
    question: 'Is there a file size limit for conversion?',
    answer: 'The converter can handle most standard documents, but performance depends on your device\'s memory and processing power. Very large documents (over 100MB) or those with many images may take longer to process.'
  },
  {
    question: 'Can I convert password-protected Word documents?',
    answer: 'Currently, our converter does not support password-protected Word documents. Please remove the password protection in Microsoft Word first, then use our converter.'
  }
];
---

<ToolLayout
  title="Word to PDF Converter - Convert DOCX to PDF Online Free"
  description="Convert Microsoft Word documents to PDF format privately in your browser. No file upload required - secure, fast, and completely free DOCX to PDF conversion."
  toolName="Word to PDF Converter"
  category="File Conversion"
  faqs={faqs}
>
  <div class="bg-white p-6 rounded-lg shadow-md">
    <div class="space-y-6">
      <!-- File Upload Area -->
      <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition-colors" id="drop-zone">
        <div class="space-y-4">
          <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
            <path d="M9 12h6m6 0h6m-6 4h6m2 5H7a2 2 0 01-2-2V8a2 2 0 012-2h10l4 4h4a2 2 0 012 2v6a2 2 0 01-2 2z" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
          </svg>
          <div>
            <label for="file-input" class="cursor-pointer">
              <span class="text-blue-600 font-medium hover:text-blue-500">Click to select Word documents</span>
              <span class="text-gray-500"> or drag and drop</span>
            </label>
            <input id="file-input" type="file" accept=".docx" multiple class="hidden">
          </div>
          <p class="text-sm text-gray-500">DOCX files only • No file size limit • Completely private</p>
        </div>
      </div>
      
      <!-- Conversion Settings -->
      <div id="settings-panel" class="hidden space-y-6">
        <h3 class="text-lg font-semibold text-gray-900">Conversion Settings</h3>
        
        <div class="grid md:grid-cols-2 gap-6">
          <div>
            <label for="page-orientation" class="block text-sm font-medium text-gray-700 mb-2">Page Orientation</label>
            <select id="page-orientation" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="auto">Auto (from document)</option>
              <option value="portrait">Portrait</option>
              <option value="landscape">Landscape</option>
            </select>
          </div>
          
          <div>
            <label for="page-size" class="block text-sm font-medium text-gray-700 mb-2">Page Size</label>
            <select id="page-size" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
              <option value="auto">Auto (from document)</option>
              <option value="a4">A4</option>
              <option value="letter">Letter</option>
              <option value="legal">Legal</option>
            </select>
          </div>
        </div>
        
        <div class="flex items-center space-x-4">
          <label class="flex items-center">
            <input type="checkbox" id="preserve-links" checked class="mr-2">
            <span class="text-sm">Preserve hyperlinks</span>
          </label>
          <label class="flex items-center">
            <input type="checkbox" id="preserve-bookmarks" checked class="mr-2">
            <span class="text-sm">Preserve bookmarks</span>
          </label>
        </div>
        
        <div class="flex gap-4">
          <button id="convert-btn" class="flex-1 bg-blue-600 text-white py-3 px-6 rounded-md hover:bg-blue-700 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed">
            Convert to PDF
          </button>
          <button id="reset-btn" class="px-6 py-3 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors">
            Reset
          </button>
        </div>
      </div>
      
      <!-- Progress -->
      <div id="progress-panel" class="hidden">
        <div class="bg-blue-50 p-4 rounded-lg">
          <div class="flex items-center space-x-3">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span class="text-blue-800">Converting documents to PDF...</span>
          </div>
          <div class="mt-2 w-full bg-blue-200 rounded-full h-2">
            <div id="progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
          </div>
        </div>
      </div>
      
      <!-- Results -->
      <div id="results-panel" class="hidden space-y-6">
        <h3 class="text-lg font-semibold text-gray-900">Conversion Results</h3>
        
        <div id="results-container" class="space-y-4">
          <!-- Results will be populated here -->
        </div>
      </div>
      
    </div>
  </div>

  <div slot="instructions">
    <ol class="space-y-3 text-gray-600">
      <li>1. Select one or more Word documents (.docx format)</li>
      <li>2. Choose your preferred page orientation and size</li>
      <li>3. Select options for preserving links and bookmarks</li>
      <li>4. Click "Convert to PDF" to start processing</li>
      <li>5. Download your converted PDF files</li>
      <li>6. All processing happens locally - no files uploaded!</li>
    </ol>
  </div>
</ToolLayout>

<script>
  let selectedFiles: File[] = [];
  
  // Elements
  const fileInput = document.getElementById('file-input') as HTMLInputElement;
  const dropZone = document.getElementById('drop-zone') as HTMLElement;
  const settingsPanel = document.getElementById('settings-panel') as HTMLElement;
  const progressPanel = document.getElementById('progress-panel') as HTMLElement;
  const resultsPanel = document.getElementById('results-panel') as HTMLElement;
  const convertBtn = document.getElementById('convert-btn') as HTMLButtonElement;
  const resetBtn = document.getElementById('reset-btn') as HTMLButtonElement;
  const resultsContainer = document.getElementById('results-container') as HTMLElement;
  const progressBar = document.getElementById('progress-bar') as HTMLElement;

  // Event listeners
  fileInput.addEventListener('change', handleFileSelection);
  dropZone.addEventListener('dragover', handleDragOver);
  dropZone.addEventListener('drop', handleFileDrop);
  convertBtn.addEventListener('click', convertDocuments);
  resetBtn.addEventListener('click', resetConverter);

  function handleFileSelection(e: Event) {
    const target = e.target as HTMLInputElement;
    selectedFiles = Array.from(target.files || []).filter(file => 
      file.name.toLowerCase().endsWith('.docx')
    );
    if (selectedFiles.length > 0) {
      showSettings();
    } else {
      alert('Please select DOCX files only.');
    }
  }

  function handleDragOver(e: DragEvent) {
    e.preventDefault();
    dropZone.classList.add('border-blue-400', 'bg-blue-50');
  }

  function handleFileDrop(e: DragEvent) {
    e.preventDefault();
    dropZone.classList.remove('border-blue-400', 'bg-blue-50');
    
    const files = Array.from(e.dataTransfer?.files || []).filter(file => 
      file.name.toLowerCase().endsWith('.docx')
    );
    if (files.length > 0) {
      selectedFiles = files;
      showSettings();
    } else {
      alert('Please select DOCX files only.');
    }
  }

  function showSettings() {
    settingsPanel.classList.remove('hidden');
    convertBtn.textContent = `Convert ${selectedFiles.length} document${selectedFiles.length > 1 ? 's' : ''} to PDF`;
  }

  async function convertDocuments() {
    if (selectedFiles.length === 0) return;

    // Show progress
    progressPanel.classList.remove('hidden');
    resultsPanel.classList.add('hidden');
    resultsContainer.innerHTML = '';

    // Get settings
    const settings = {
      orientation: (document.getElementById('page-orientation') as HTMLSelectElement).value,
      pageSize: (document.getElementById('page-size') as HTMLSelectElement).value,
      preserveLinks: (document.getElementById('preserve-links') as HTMLInputElement).checked,
      preserveBookmarks: (document.getElementById('preserve-bookmarks') as HTMLInputElement).checked
    };

    try {
      // Dynamic imports for browser compatibility
      const [mammoth, PDFLib] = await Promise.all([
        import('mammoth'),
        import('pdf-lib')
      ]);
      
      const results = [];
      
      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i];
        
        try {
          const pdfBlob = await convertWordToPDF(file, settings, mammoth, PDFLib);
          
          results.push({
            originalFile: file,
            convertedBlob: pdfBlob,
            fileName: file.name.replace('.docx', '.pdf'),
            originalSize: file.size,
            newSize: pdfBlob.size,
            success: true
          });
        } catch (error) {
          results.push({
            originalFile: file,
            fileName: file.name.replace('.docx', '.pdf'),
            success: false,
            message: error.message
          });
        }
        
        // Update progress
        const progress = ((i + 1) / selectedFiles.length) * 100;
        progressBar.style.width = `${progress}%`;
      }

      // Hide progress and show results
      progressPanel.classList.add('hidden');
      displayResults(results);
      
    } catch (error) {
      progressPanel.classList.add('hidden');
      alert('Error loading conversion libraries: ' + error.message);
    }
  }

  async function convertWordToPDF(file: File, settings: any, mammoth: any, PDFLib: any) {
    // Read the DOCX file
    const arrayBuffer = await file.arrayBuffer();
    
    // Extract HTML from DOCX using mammoth
    const result = await mammoth.convertToHtml({ arrayBuffer });
    const htmlContent = result.value;
    
    // Create a new PDF document
    const pdfDoc = await PDFLib.PDFDocument.create();
    
    // Set page size
    let pageSize = PDFLib.PageSizes.A4;
    if (settings.pageSize === 'letter') pageSize = PDFLib.PageSizes.Letter;
    if (settings.pageSize === 'legal') pageSize = PDFLib.PageSizes.Legal;
    
    // Add a page
    const page = pdfDoc.addPage(pageSize);
    const { width, height } = page.getSize();
    
    // Basic text extraction (simplified approach)
    const textContent = htmlContent.replace(/<[^>]+>/g, ' ').replace(/\s+/g, ' ').trim();
    
    // Add text to PDF (basic implementation)
    const fontSize = 12;
    const margin = 50;
    const lineHeight = 18;
    const maxWidth = width - (margin * 2);
    
    const font = await pdfDoc.embedFont(PDFLib.StandardFonts.Helvetica);
    
    // Split text into lines that fit the page
    const words = textContent.split(' ');
    const lines = [];
    let currentLine = '';
    
    for (const word of words) {
      const testLine = currentLine + (currentLine ? ' ' : '') + word;
      const textWidth = font.widthOfTextAtSize(testLine, fontSize);
      
      if (textWidth <= maxWidth) {
        currentLine = testLine;
      } else {
        if (currentLine) lines.push(currentLine);
        currentLine = word;
      }
    }
    if (currentLine) lines.push(currentLine);
    
    // Add text to page
    let y = height - margin;
    for (let i = 0; i < lines.length && y > margin; i++) {
      page.drawText(lines[i], {
        x: margin,
        y: y,
        size: fontSize,
        font: font,
        color: PDFLib.rgb(0, 0, 0)
      });
      y -= lineHeight;
      
      // Add new page if needed
      if (y <= margin && i < lines.length - 1) {
        const newPage = pdfDoc.addPage(pageSize);
        y = newPage.getSize().height - margin;
      }
    }
    
    // Generate PDF bytes
    const pdfBytes = await pdfDoc.save();
    return new Blob([pdfBytes], { type: 'application/pdf' });
  }

  function displayResults(results: any[]) {
    resultsPanel.classList.remove('hidden');

    results.forEach((result: any, index: number) => {
      const resultDiv = document.createElement('div');
      resultDiv.className = 'bg-gray-50 p-4 rounded-lg';

      if (result.success) {
        const compressionInfo = result.originalSize && result.newSize ? 
          `${formatFileSize(result.originalSize)} → ${formatFileSize(result.newSize)}` : '';
        
        resultDiv.innerHTML = `
          <div class="flex items-center justify-between mb-3">
            <div>
              <h4 class="font-medium text-gray-900">${result.fileName}</h4>
              <p class="text-sm text-green-600">✓ Converted successfully</p>
              ${compressionInfo ? `<p class="text-sm text-gray-500">${compressionInfo}</p>` : ''}
            </div>
            <button onclick="downloadPDFFile('${index}')" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors">
              Download PDF
            </button>
          </div>
        `;
      } else {
        resultDiv.innerHTML = `
          <div class="flex items-start space-x-3">
            <svg class="flex-shrink-0 w-5 h-5 text-red-400 mt-1" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
            <div>
              <h4 class="font-medium text-gray-900">${result.originalFile.name}</h4>
              <p class="text-sm text-red-600">Conversion failed</p>
              <p class="text-sm text-gray-500 mt-1">${result.message}</p>
            </div>
          </div>
        `;
      }

      resultsContainer.appendChild(resultDiv);
    });

    // Store results globally for download function
    (window as any).pdfConversionResults = results;

    // Add download all button for successful conversions
    const successfulResults = results.filter(r => r.success);
    if (successfulResults.length > 1) {
      const downloadAllBtn = document.createElement('button');
      downloadAllBtn.className = 'w-full mt-4 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors';
      downloadAllBtn.textContent = `Download All ${successfulResults.length} PDF Files`;
      downloadAllBtn.onclick = downloadAllPDFs;
      resultsContainer.appendChild(downloadAllBtn);
    }
  }

  function downloadPDFFile(index: number) {
    const result = (window as any).pdfConversionResults[index];
    if (result.success && result.convertedBlob) {
      const link = document.createElement('a');
      link.href = URL.createObjectURL(result.convertedBlob);
      link.download = result.fileName;
      link.click();
      URL.revokeObjectURL(link.href);
    }
  }

  function downloadAllPDFs() {
    const results = (window as any).pdfConversionResults.filter((r: any) => r.success);
    results.forEach((result: any, index: number) => {
      setTimeout(() => {
        const link = document.createElement('a');
        link.href = URL.createObjectURL(result.convertedBlob);
        link.download = result.fileName;
        link.click();
        URL.revokeObjectURL(link.href);
      }, index * 100);
    });
  }

  function resetConverter() {
    selectedFiles = [];
    fileInput.value = '';
    settingsPanel.classList.add('hidden');
    resultsPanel.classList.add('hidden');
    progressPanel.classList.add('hidden');
    resultsContainer.innerHTML = '';
    progressBar.style.width = '0%';
  }

  function formatFileSize(bytes: number): string {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }
</script>
