---
import ToolLayout from '@/layouts/ToolLayout.astro';

const faqs = [
  {
    question: 'How to convert PNG to JPG privately without uploading files?',
    answer: 'Our PNG to JPG converter works entirely in your browser using JavaScript. Your files never leave your device, ensuring complete privacy and security. Simply select your PNG file, adjust quality settings, and download the converted JPG.'
  },
  {
    question: 'What happens to the transparency in PNG files?',
    answer: 'JPG format does not support transparency. When converting PNG files with transparent backgrounds, you can choose a background color to replace the transparency. White is the default, but you can select any color you prefer.'
  },
  {
    question: 'Can I convert multiple PNG files at once?',
    answer: 'Currently, our converter processes one file at a time to ensure optimal performance and privacy. You can quickly convert multiple files by repeating the process for each image.'
  },
  {
    question: 'What quality settings should I use?',
    answer: 'For web use, 80-90% quality provides a good balance between file size and image quality. For print or high-quality purposes, use 90-95%. Lower quality (60-70%) creates smaller files but may show compression artifacts.'
  },
  {
    question: 'Is there a file size limit for conversion?',
    answer: 'The converter can handle large images, but performance depends on your device\'s memory and processing power. Very large images (over 50MB) may take longer to process or require a more powerful device.'
  }
];
---

<ToolLayout
  title="PNG to JPG Converter - Convert Images Privately Online"
  description="Convert PNG images to JPG format privately in your browser. No file upload required - all processing happens on your device for maximum security and privacy."
  toolName="PNG to JPG Converter"
  category="File Conversion"
  faqs={faqs}
>
  <div class="bg-white p-6 rounded-lg shadow-md">
    <div class="space-y-6">
      <!-- File Upload Area -->
      <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition-colors" id="drop-zone">
        <div class="space-y-4">
          <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
            <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
          </svg>
          <div>
            <label for="file-input" class="cursor-pointer">
              <span class="text-blue-600 font-medium hover:text-blue-500">Click to select PNG files</span>
              <span class="text-gray-500"> or drag and drop</span>
            </label>
            <input id="file-input" type="file" accept=".png" multiple class="hidden">
          </div>
          <p class="text-sm text-gray-500">PNG files only • No file size limit • Completely private</p>
        </div>
      </div>
      
      <!-- Conversion Settings -->
      <div id="settings-panel" class="hidden space-y-6">
        <h3 class="text-lg font-semibold text-gray-900">Conversion Settings</h3>
        
        <div class="grid md:grid-cols-2 gap-6">
          <div>
            <label for="quality-slider" class="block text-sm font-medium text-gray-700 mb-2">
              JPG Quality: <span id="quality-value">90</span>%
            </label>
            <input type="range" id="quality-slider" min="10" max="100" value="90" 
                   class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
            <div class="flex justify-between text-xs text-gray-500 mt-1">
              <span>Smaller file</span>
              <span>Better quality</span>
            </div>
          </div>
          
          <div>
            <label for="background-color" class="block text-sm font-medium text-gray-700 mb-2">
              Background Color (for transparency)
            </label>
            <div class="flex space-x-2">
              <input type="color" id="background-color" value="#ffffff" class="h-10 w-16 border border-gray-300 rounded cursor-pointer">
              <select id="background-preset" class="flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="#ffffff">White</option>
                <option value="#000000">Black</option>
                <option value="#f3f4f6">Light Gray</option>
                <option value="#ef4444">Red</option>
                <option value="#3b82f6">Blue</option>
                <option value="custom">Custom</option>
              </select>
            </div>
          </div>
        </div>
        
        <div class="flex gap-4">
          <button id="convert-btn" class="flex-1 bg-blue-600 text-white py-3 px-6 rounded-md hover:bg-blue-700 transition-colors font-medium disabled:opacity-50 disabled:cursor-not-allowed">
            Convert to JPG
          </button>
          <button id="reset-btn" class="px-6 py-3 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors">
            Reset
          </button>
        </div>
      </div>
      
      <!-- Preview and Results -->
      <div id="preview-panel" class="hidden space-y-6">
        <h3 class="text-lg font-semibold text-gray-900">Conversion Results</h3>
        
        <div id="results-container" class="space-y-6">
          <!-- Results will be populated here -->
        </div>
      </div>
      
      <!-- Progress -->
      <div id="progress-panel" class="hidden">
        <div class="bg-blue-50 p-4 rounded-lg">
          <div class="flex items-center space-x-3">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
            <span class="text-blue-800">Converting images...</span>
          </div>
          <div class="mt-2 w-full bg-blue-200 rounded-full h-2">
            <div id="progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div slot="instructions">
    <ol class="space-y-3 text-gray-600">
      <li>1. Click to select PNG files or drag and drop them</li>
      <li>2. Adjust the JPG quality (90% recommended)</li>
      <li>3. Choose background color for transparent areas</li>
      <li>4. Click "Convert to JPG" to process files</li>
      <li>5. Download your converted JPG files</li>
      <li>6. All processing happens in your browser - completely private!</li>
    </ol>
  </div>
</ToolLayout>

<script>
  let selectedFiles: File[] = [];
  
  // Elements
  const fileInput = document.getElementById('file-input') as HTMLInputElement;
  const dropZone = document.getElementById('drop-zone') as HTMLElement;
  const settingsPanel = document.getElementById('settings-panel') as HTMLElement;
  const previewPanel = document.getElementById('preview-panel') as HTMLElement;
  const progressPanel = document.getElementById('progress-panel') as HTMLElement;
  const qualitySlider = document.getElementById('quality-slider') as HTMLInputElement;
  const qualityValue = document.getElementById('quality-value') as HTMLElement;
  const backgroundColorInput = document.getElementById('background-color') as HTMLInputElement;
  const backgroundPreset = document.getElementById('background-preset') as HTMLSelectElement;
  const convertBtn = document.getElementById('convert-btn') as HTMLButtonElement;
  const resetBtn = document.getElementById('reset-btn') as HTMLButtonElement;
  const resultsContainer = document.getElementById('results-container') as HTMLElement;
  const progressBar = document.getElementById('progress-bar') as HTMLElement;

  // Event listeners
  fileInput.addEventListener('change', handleFileSelection);
  dropZone.addEventListener('dragover', handleDragOver);
  dropZone.addEventListener('drop', handleFileDrop);
  qualitySlider.addEventListener('input', updateQualityValue);
  backgroundPreset.addEventListener('change', handleBackgroundPresetChange);
  convertBtn.addEventListener('click', convertImages);
  resetBtn.addEventListener('click', resetConverter);

  function handleFileSelection(e: Event) {
    const target = e.target as HTMLInputElement;
    selectedFiles = Array.from(target.files || []).filter(file => file.type === 'image/png');
    if (selectedFiles.length > 0) {
      showSettings();
    }
  }

  function handleDragOver(e: DragEvent) {
    e.preventDefault();
    dropZone.classList.add('border-blue-400', 'bg-blue-50');
  }

  function handleFileDrop(e: DragEvent) {
    e.preventDefault();
    dropZone.classList.remove('border-blue-400', 'bg-blue-50');
    
    const files = Array.from(e.dataTransfer?.files || []).filter(file => file.type === 'image/png');
    if (files.length > 0) {
      selectedFiles = files;
      showSettings();
    } else {
      alert('Please select PNG files only.');
    }
  }

  function showSettings() {
    settingsPanel.classList.remove('hidden');
    convertBtn.textContent = `Convert ${selectedFiles.length} PNG file${selectedFiles.length > 1 ? 's' : ''} to JPG`;
  }

  function updateQualityValue() {
    qualityValue.textContent = qualitySlider.value;
  }

  function handleBackgroundPresetChange() {
    if (backgroundPreset.value !== 'custom') {
      backgroundColorInput.value = backgroundPreset.value;
    }
  }

  async function convertImages() {
    if (selectedFiles.length === 0) return;

    // Show progress
    progressPanel.classList.remove('hidden');
    previewPanel.classList.add('hidden');
    resultsContainer.innerHTML = '';

    const quality = parseInt(qualitySlider.value) / 100;
    const backgroundColor = backgroundColorInput.value;

    try {
      const results = [];
      
      for (let i = 0; i < selectedFiles.length; i++) {
        const file = selectedFiles[i];
        const result = await convertPNGtoJPG(file, quality, backgroundColor);
        results.push(result);
        
        // Update progress
        const progress = ((i + 1) / selectedFiles.length) * 100;
        progressBar.style.width = `${progress}%`;
      }

      // Hide progress and show results
      progressPanel.classList.add('hidden');
      displayResults(results);
      
    } catch (error) {
      progressPanel.classList.add('hidden');
      alert('Error converting images: ' + error.message);
    }
  }

  async function convertPNGtoJPG(file, quality, backgroundColor) {
    return new Promise((resolve, reject) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();

      img.onload = () => {
        canvas.width = img.width;
        canvas.height = img.height;

        // Fill background color
        ctx.fillStyle = backgroundColor;
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        // Draw image
        ctx.drawImage(img, 0, 0);

        // Convert to JPG
        canvas.toBlob(blob => {
          const originalSize = file.size;
          const newSize = blob.size;
          const fileName = file.name.replace('.png', '.jpg');

          resolve({
            originalFile: file,
            convertedBlob: blob,
            fileName: fileName,
            originalSize: originalSize,
            newSize: newSize,
            quality: Math.round(quality * 100)
          });
        }, 'image/jpeg', quality);
      };

      img.onerror = () => reject(new Error('Failed to load image'));
      img.src = URL.createObjectURL(file);
    });
  }

  function displayResults(results) {
    previewPanel.classList.remove('hidden');

    results.forEach((result, index) => {
      const resultDiv = document.createElement('div');
      resultDiv.className = 'bg-gray-50 p-4 rounded-lg';

      const compressionRatio = ((result.originalSize - result.newSize) / result.originalSize * 100);
      const compressionText = compressionRatio > 0 
        ? `${compressionRatio.toFixed(1)}% smaller` 
        : `${Math.abs(compressionRatio).toFixed(1)}% larger`;

      resultDiv.innerHTML = `
        <div class="flex items-center justify-between mb-3">
          <div>
            <h4 class="font-medium text-gray-900">${result.fileName}</h4>
            <p class="text-sm text-gray-500">
              ${formatFileSize(result.originalSize)} → ${formatFileSize(result.newSize)} 
              (${compressionText})
            </p>
          </div>
          <button onclick="downloadFile('${index}')" class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700 transition-colors">
            Download
          </button>
        </div>
        <div class="grid grid-cols-2 gap-4">
          <div>
            <p class="text-sm font-medium text-gray-700 mb-2">Original (PNG)</p>
            <img src="${URL.createObjectURL(result.originalFile)}" alt="Original" class="w-full h-32 object-cover rounded border">
          </div>
          <div>
            <p class="text-sm font-medium text-gray-700 mb-2">Converted (JPG, ${result.quality}%)</p>
            <img src="${URL.createObjectURL(result.convertedBlob)}" alt="Converted" class="w-full h-32 object-cover rounded border">
          </div>
        </div>
      `;

      resultsContainer.appendChild(resultDiv);
    });

    // Store results globally for download function
    window.conversionResults = results;

    // Add download all button
    if (results.length > 1) {
      const downloadAllBtn = document.createElement('button');
      downloadAllBtn.className = 'w-full mt-4 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors';
      downloadAllBtn.textContent = `Download All ${results.length} JPG Files`;
      downloadAllBtn.onclick = downloadAllFiles;
      resultsContainer.appendChild(downloadAllBtn);
    }
  }

  function downloadFile(index) {
    const result = window.conversionResults[index];
    const link = document.createElement('a');
    link.href = URL.createObjectURL(result.convertedBlob);
    link.download = result.fileName;
    link.click();
    URL.revokeObjectURL(link.href);
  }

  function downloadAllFiles() {
    window.conversionResults.forEach((result, index) => {
      setTimeout(() => {
        downloadFile(index.toString());
      }, index * 100);
    });
  }

  function resetConverter() {
    selectedFiles = [];
    fileInput.value = '';
    settingsPanel.classList.add('hidden');
    previewPanel.classList.add('hidden');
    progressPanel.classList.add('hidden');
    resultsContainer.innerHTML = '';
    progressBar.style.width = '0%';
    window.conversionResults = null;
  }

  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  // Initialize quality value display
  updateQualityValue();
</script>
